name: "Push to main branch"

on:
    push:
        branches:
            - "main"
    workflow_dispatch:

jobs:
    build:
        runs-on: "ubuntu-latest"
        steps:
          - name: "Checkout"
            uses: "actions/checkout@v4"

          - name: "Login to GitHub Container Registry"
            uses: "docker/login-action@v3"
            with:
                registry: "ghcr.io"
                username: "${{ github.actor }}"
                password: "${{ secrets.GITHUB_TOKEN }}"

          - name: "Get lowercase repository details"
            id: "lowercase-repo-details"
            run: |
                echo "REPOSITORYLC=${GITHUB_REPOSITORY@L}" >> "${GITHUB_ENV}"

          - name: "Docker Buildx setup"
            uses: "docker/setup-buildx-action@v3"

          - name: "Build and push image"
            uses: "docker/build-push-action@v5"
            with:
                context: "."
                push: "true"
                tags: "ghcr.io/${{ env.REPOSITORYLC }}:latest"
                cache-from: "type=gha"
                cache-to: "type=gha,mode=max"

    test:
        runs-on: "ubuntu-latest"
        needs: ["build"]
        steps:
          - name: "Checkout"
            uses: "actions/checkout@v4"

          - name: "Validate composer.json and composer.lock"
            run: |
                composer validate --strict

          - name: "Cache composer packages"
            id: "composer-cache"
            uses: "actions/cache@v4"
            with:
                path: "project/src/lib/vendor"
                key: "${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}"
                restore-keys: |
                    ${{ runner.os }}-php-

          - name: "Install composer packages"
            run: |
                composer install --no-interaction --ignore-platform-reqs

          - name: "Run tests"
            run: |
                composer run-script test

    deploy:
        runs-on: "ubuntu-latest"
        needs: ["build", "test"]
        steps:
          - name: "Deploy to production"
            run: |
                if [ "${{vars.AUTODEPLOY_ACTIVATED}}" != "true" ]; then
                    echo "Cancelled deployment because ${{vars.AUTODEPLOY_ACTIVATED}} is not set or not true"
                    exit 0
                fi
                
                echo "Calling ${{vars.AUTODEPLOY_BASE_URL}}/deploy"
                RESPONSE=$(curl -s -w "\\n%{http_code}" -u ${{secrets.AUTODEPLOY_AUTH_USERNAME}}:${{secrets.AUTODEPLOY_AUTH_PASSWORD}} ${{vars.AUTODEPLOY_BASE_URL}}/deploy)
                HTTP_CODE=$(echo "${RESPONSE}" | tail -n 1)
                HTTP_BODY=$(echo "${RESPONSE}" | head -n -1)
                echo "${HTTP_BODY}"
                
                if [ "$HTTP_CODE" != "200" ]; then
                    echo "${HTTP_CODE}"
                    exit 1
                fi
